<div id="mynetwork" style="height:100%;"></div>
<div style="position:absolute;bottom: 5%">
    <div class="ui icon menu" id="edit_menu">
        <div class="ui left bottom pointing dropdown link item">
            <i class="angle up icon"></i>
            <div class="menu">
                <a class="item">批量修改点</a>
                <a class="item">批量修改边</a>
                <a class="item" id="menu_change_toponame">修改拓扑名</a>
            </div>
        </div>
        <a class="item active" id="select_mode">
            <i class="mouse pointer icon"></i>
        </a>
        <a class="item" id="add_node_mode">
            <i class="circle icon" ></i>
        </a>
        <a class="item" id="add_edge_mode">
            <i class="fork icon"></i>
        </a>
        <a class="item" id="save_topo">
            <i class="save icon"></i>
        </a>
        <a class="item" id="open_topo">
            <i class="folder open icon"></i>
        </a>
        <div class="ui right bottom pointing dropdown link item">
            <i class="plus square outline icon"></i>
            <div class="menu">
                <a class="item" id="item_create_dcell">DCELL</a>
                <a class="item" id="item_create_vl2">VL2</a>
                <a class="item" >普通拓扑</a>
            </div>
        </div>
    </div>
</div>

<div style="position:absolute;right: 50px;bottom: 50px">
    <p>拓扑名:<span id="topo_name">未知</span></p>
    <p>拓扑类型:<span id="topo_type">未知</span>(<span id="topo_property"></span>)</p>
</div>
</div>
<div class="ui modal" id="modal_edit_node">
    <div>
        <div class="ui segments">
            <div class="ui segment">
                <h1>修改节点</h1>
            </div>
            <div class="ui segment">
                <div class="ui form">
                    <div class="field">
                        <label>节点类型</label>
                        <div class="ui compact selection dropdown" style="width: 30%" id="dropdown_node_type">
                            <input id="selected_topo_type" name="topo_type" type="hidden">
                            <i  class="dropdown icon"></i>
                            <div class="default text">节点类型</div>
                            <div class="menu">
                                <a class="item" onclick="modal_edit_node_load('server')" data-value="server" name="server">服务器</a>
                                <a class="item" onclick="modal_edit_node_load('switch')" data-value="switch" name="switch">交换机</a>
                            </div>
                        </div>
                    </div>
                    <div id="div_edit_node">
                        <div id="div_edit_node_server" hidden="hidden">
                            <div class="two fields">
                                <div class="field">
                                    <label>UID</label>
                                    <input type="text" placeholder="ID" id="modal_node_id_server">
                                </div>
                                <div class="field">
                                    <label>TUPLE</label>
                                    <input type="text" placeholder="TUPLE" id="modal_node_tuple_server">
                                </div>
                            </div>
                            <div class="two fields">
                                <div class="field">
                                    <label>BW (Bytes/s)</label>
                                    <input type="text" placeholder="BW" id="modal_node_bw_server" >
                                </div>
                                <div class="field">
                                    <label>MIPS</label>
                                    <input type="text" placeholder="MIPS" id="modal_node_mips_server">
                                </div>
                            </div>
                        </div>
                        <div id="div_edit_node_switch" hidden="hidden">
                            <div class="two fields">
                                <div class="field">
                                    <label>UID</label>
                                    <input type="text" placeholder="ID" id="modal_node_id_switch">
                                </div>
                                <div class="field">
                                    <label>LABEL</label>
                                    <input type="text" placeholder="LABEL" id="modal_node_label_switch">
                                </div>
                            </div>
                            <div class="two fields">
                                <div class="field">
                                    <label>BW (Bytes/s)</label>
                                    <input type="text" placeholder="BW" id="modal_node_bw_switch">
                                </div>
                                <div class="field">
                                    <label>MIPS</label>
                                    <input type="text" placeholder="MIPS" id="modal_node_mips_switch">
                                </div>
                            </div>
                        </div>
                    </div>
                    <input type="submit" class="ui button positive" value="确定" id="btn_update_node">
                    <div class="ui button" id="btn_update_node_cancel">取消</div>
                    <div class="ui button negative" style="position:absolute;right:0px" id="btn_delete_node">删除</div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="ui modal" id="modal_edit_edge">
    <div>
        <div class="ui segments">
            <div class="ui segment">
                <h1>修改边</h1>
            </div>
            <div class="ui segment">
                <div class="ui form">
                    <div class="field">
                        <label>UID</label>
                        <input type="text" placeholder="ID" id="modal_edge_id">
                    </div>
                    <div class="two fields">
                        <div class="field">
                            <label>BW (Bytes/s)</label>
                            <input type="text" placeholder="BW" id="modal_edge_bw" >
                        </div>
                        <div class="field">
                            <label>DELAY (ms)</label>
                            <input type="text" placeholder="DELAY" id="modal_edge_delay">
                        </div>
                    </div>
                    <input type="submit" class="ui button positive" value="确定" onclick="update_edge()">
                    <div class="ui button" onclick="$('#modal_edit_edge').modal('hide')">取消</div>
                    <div class="ui button negative" style="position:absolute;right:0px" onclick="$('#modal_edit_edge').modal('hide');net.deleteSelected()">删除</div>
                </div>
            </div>
        </div>
    </div>

</div>
<div class="ui modal" id="modal_create_topo">
    <div>
        <div class="ui segments">
            <div class="ui segment">
                <h1>新建拓扑</h1>
            </div>
            <div class="ui segment">
                <div class="ui form">
                    <div class="field">
                        <label>拓扑名</label>
                        <input type="text" placeholder="拓扑名" id="form_topo_name" value="新建拓扑">
                    </div>
                    <div class="two fields">
                        <div class="field">
                            <label>度</label>
                            <input type="text" placeholder="度" id="form_dcell_dgree" value="4">
                        </div>
                        <div class="field">
                            <label>层数</label>
                            <input type="text" placeholder="层数" id="form_dcell_level" value="2">
                        </div>
                    </div>
                    <input type="submit" class="ui button positive" value="确定" id="btn_create_topo">
                    <div class="ui button" id="btn_create_topo_cancel">取消</div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="ui modal" id="modal_change_toponame">
    <div>
        <div class="ui segments">
            <div class="ui segment">
                <h1>修改拓扑名</h1>
            </div>
            <div class="ui segment">
                <div class="ui form">
                    <div class="field">
                        <label>修改成:</label>
                        <input type="text" id="txt_change_toponame">
                    </div>
                </div>
                <br/>
                <button class="ui button positive" id="btn_change_toponame">确定</button>
            </div>
        </div>
    </div>
</div>
<div class="ui modal" id="modal_open_topo" style="max-height:80%">
    <div>
        <div class="ui segments">
            <div class="ui segment">
                <h1>打开拓扑</h1>
            </div>
            <div class="ui segment">
                <div class="ui form">
                    <div class="field">
                        <label>拓扑类型</label>
                        <div class="ui compact selection dropdown" style="width: 30%" id="topo_type_select">
                            <input name="topo_type" type="hidden">
                            <i  class="dropdown icon"></i>
                            <div class="default text">拓扑类型</div>
                            <div class="menu">
                                <a class="item" onclick="item_topo_type_onclick(this)" name="DCELL">DCELL</a>
                                <a class="item" onclick="item_topo_type_onclick(this)" name="VL2">VL2</a>
                                <a class="item" onclick="item_topo_type_onclick(this)" name="ALL">全部</a>
                            </div>
                        </div>
                    </div>
                    <div class="field" >
                        <label>拓扑名</label>
                        <div class="ui segment" style="padding: 0px;overflow-y: scroll">
                            <div class="ui middle aligned selection list" id="topo_name_list" style="height:300px;">
                            </div>
                        </div>
                    </div>
                    <input type="submit" class="ui button positive" value="确定" onclick="open_topo(this)">
                    <div class="ui button" id="btn_open_topo_cancel">取消</div>
                    <div class="ui button negative" id="btn_delete_topo" onclick="delete_topo(this)" style="position: absolute;right:0px">删除</div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="/js/vis.js"></script>
<script src="/js/draw.js"></script>
<script>
    var net;
    var nodes_edges;
    var nodes,edges;
    var edit_nodeid_now;
    var edit_edgeid_now;
    var topo_id_now;
    var topo_property;
    function topo_name_list_onclick(e){
        $('#topo_name_list').find('.active').removeClass('active')
        $(e).addClass('active');
    }
    //网络的点或者边的dataset数据转换成数组
    function net_datas2array(datas){
        var array = [];
        var p;
        for(p in datas._data){
            if(p != '__proto__' && p != '_fieldId'){
                array.push(datas._data[p]);
            }
        }
        return array;
    }
    //加载边数据到modal输入框
    function modal_edit_edge_load() {
        var edge_data;
        edge_data = edges.get(edit_edgeid_now);
        $('#modal_edge_id').val(edit_edgeid_now);
        $('#modal_edge_bw').val(edge_data.param.bw);
        $('#modal_edge_delay').val(edge_data.param.delay);
    }
    //加载节点数据到modal的输入框
    function modal_edit_node_load(node_type){
        var node_data;
        node_data = nodes.get(edit_nodeid_now);
        if(node_type == node_data.type){
            //如果需要加载的是正在编辑的节点
            if(node_type == 'server'){
                $('#modal_node_id_server').val(edit_nodeid_now);
                $('#modal_node_tuple_server').val(String(node_data.tuple));
                $('#modal_node_bw_server').val(String(node_data.param.bw));
                $('#modal_node_mips_server').val(String(node_data.param.mips));
                $('#div_edit_node').children().hide();
                $('#div_edit_node_server').show();
            }else if(node_type == 'switch'){
                $('#modal_node_id_switch').val(edit_nodeid_now);
                $('#modal_node_label_switch').val(String(node_data.label));
                $('#modal_node_bw_switch').val(String(node_data.param.bw));
                $('#modal_node_mips_switch').val(String(node_data.param.mips));
                $('#div_edit_node').children().hide();
                $('#div_edit_node_switch').show();
            }
        }else{
            //如果不是正在加载的节点
            if(node_type == 'server'){
                $('#modal_node_id_server').val(get_unuseid(nodes,0));
                $('#modal_node_tuple_server').val(uid2tuple(get_unuseid(nodes,0),topo_property.level,topo_property.tk));
                $('#modal_node_bw_server').val('100000000');
                $('#modal_node_mips_server').val('1000');
                $('#div_edit_node').children().hide();
                $('#div_edit_node_server').show();
            }else if(node_type == 'switch'){
                $('#modal_node_id_switch').val(get_unuseid(nodes,topo_property.switchid_start));
                $('#modal_node_label_switch').val('switch');
                $('#modal_node_bw_switch').val('100000000');
                $('#modal_node_mips_switch').val('1000');
                $('#div_edit_node').children().hide();
                $('#div_edit_node_switch').show();
            }

        }

    }
    function delete_topo(e){
        var post_data;
        var topo_selected = $('#topo_name_list').find('.active');
        if(topo_selected == null){
            alert('请选择一个拓扑');
            return;
        }
        post_data = {topo_id:topo_selected.attr('topo_id')};
        $.post('/setting/draw_topology/del_topo',post_data,function(data,status){
            if(data = 'success'){
                topo_selected.remove();
                alert('删除成功');
            }else if(data = 'error'){
                alert('删除失败');
            }
        });

    }
    function item_topo_type_onclick(e){
        var post_data = {};
        post_data.type = 'name';
        $.post('/setting/draw_topology/get_topo',post_data,function (data,status) {
            var data_json = JSON.parse(data);
            var i;
            $('#topo_name_list').empty();
            for(i = 0;i < data_json.length;i++){
                if(data_json[i].topo_type == $(e).attr('name') || $(e).attr('name') == 'ALL'){
                    $('#topo_name_list').append(
                        "<div class=\"item\" topo_id=\"" + data_json[i].topo_id + "\"onclick=\"topo_name_list_onclick(this)\" ondblclick='open_topo(this)'>" +
                        "<div class=\"content\">" +
                        data_json[i].topo_name +
                        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(" +
                        data_json[i].topo_type +
                        ")</div></div>"
                    );
                }
            }
        });
    }
    function open_topo(e){
        var post_data = {};
        var parse_data;
        if($('#topo_name_list').find('.active').length == 0){
            alert('请选择一个拓扑');
            return;
        }
        post_data.type = 'topo_data';
        post_data.topo_id = $('#topo_name_list').find('.active').attr('topo_id');
        $.post('/setting/draw_topology/get_topo',post_data,function (data,status) {
            parse_data = JSON.parse(data);
            topo_id_now = parse_data.topo_id;
            topo_property = JSON.parse(parse_data.topo_property);
            $('#topo_name').text(parse_data.topo_name);
            $('#topo_type').text(parse_data.topo_type);
            $('#topo_property').text('d:' + topo_property.degree + ',l:' + topo_property.level);
            create_net(JSON.parse(parse_data.topo_nodes),JSON.parse(parse_data.topo_edges));
            $('#modal_open_topo').modal('hide');

        });
    }
    function create_net(net_nodes,net_edges){
        nodes = new vis.DataSet(net_nodes);
        edges = new vis.DataSet(net_edges);
        var container = document.getElementById( "mynetwork" );
        var data = { nodes: nodes, edges: edges};
        var options = {edges: {smooth:{enabled:false}},
            nodes:{fixed:{x:false,y:false}},
            layout:{improvedLayout:true},
            physics:{enabled:false,stabilization:{updateInterval:10}},
            stabilize: false,
            manipulation:{
                enabled:true,
                addEdge:function(edgeData,callback){
                    if(edgeData.from == edgeData.to){
                        var r = confirm("确定连接自己？");
                        if(r == true){
                            edgeData.id = get_unuseid(edges,0);
                            edgeData.param = {bw:100000000,delay:100};
                            callback(edgeData);
                        }
                    }else{
                        edgeData.id = get_unuseid(edges,0);
                        edgeData.param = {bw:100000000,delay:100};
                        callback(edgeData);
                        net.addEdgeMode();
                    }
                },
                addNode: function(nodeData,callback) {
                    if($('#topo_type').text() == 'DCELL'){
                        nodeData.id = get_unuseid(nodes,0);
                        nodeData.label = uid2tuple(get_unuseid(nodes,0),topo_property.level,topo_property.tk);
                        nodeData.tuple = uid2tuple(get_unuseid(nodes,0),topo_property.level,topo_property.tk);
                        nodeData.param = {bw:100000000,mips:1000};
                        nodeData.type = 'server';
                    }
                    callback(nodeData);
                    net.addNodeMode();
                }
            }
        };
        net = new vis.Network( container, data, options );
        net.on('doubleClick',function (obj) {
            var nodes_selected_id = net.getSelectedNodes();
            var edges_selected_id = net.getSelectedEdges();
            var node_data,edge_data;
            if(nodes_selected_id.length != 0){
                edit_nodeid_now = nodes_selected_id[0];
                node_data = nodes.get(edit_nodeid_now);
                $('#modal_edit_node').modal({autofocus:false}).modal('show');
                $('#dropdown_node_type').dropdown('set selected',node_data.type);
                modal_edit_node_load(node_data.type);
            }else if(edges_selected_id.length != 0){
                edit_edgeid_now = edges_selected_id[0];
                modal_edit_edge_load();
                $('#modal_edit_edge').modal({autofocus:false}).modal('show');
            }
        });
        net.on('dragEnd',function(obj){
            net.storePositions();
        });
    }
    function create_dcell(n,k){
        var dcell_data = draw_dcell(n,k);
        topo_property = {};
        topo_property.degree = dcell_data.degree;
        topo_property.level = dcell_data.level;
        topo_property.tk = dcell_data.tk;
        topo_property.gk = dcell_data.gk;
        topo_property.switchid_start = dcell_data.switchid_start;
        create_net(dcell_data.nodes,dcell_data.edges);
    }
    function update_edge(){
        var change_id = parseInt($('#modal_edge_id').val());
        var edge_data;
        //下面判断是否需要修改点的Id,而且判断欲修改成的ID是否已存在
        if(node_data != null && change_id != edit_nodeid_now){
            alert('ID重复');
            return;
        }else if(change_id != edit_edgeid_now){
            edge_data = edges.get(edit_edgeid_now);
            edges.remove(edit_edgeid_now);
            edge_data.id = change_id;
            edges.add(edge_data);
        }
        edge_data.param.bw = parseInt($('#modal_edge_bw').val());
        edge_data.param.delay = parseInt($('#modal_edge_delay').val());
        $('#modal_edit_edge').modal('hide');
        edges.update(edge_data);

    }
    function update_node() {
        var change_id;
        var node_data;
        var connected_nodes;
        var i;
        if($('#selected_topo_type').val() == 'server'){
            change_id = parseInt($('#modal_node_id_server').val());
        }else if($('#selected_topo_type').val() == 'switch'){
            change_id = parseInt($('#modal_node_id_switch').val());
        }
        node_data = nodes.get(change_id);
        //下面判断是否需要修改点的Id,而且判断欲修改成的ID是否已存在
        if(node_data != null && change_id != edit_nodeid_now){
            alert('ID重复');
            return;
        }else if(change_id != edit_nodeid_now){
            node_data = nodes.get(edit_nodeid_now);
            connected_nodes = net.getConnectedNodes(edit_nodeid_now);
            nodes.remove(edit_nodeid_now);
            node_data.id = change_id;
            nodes.add(node_data);
            for(i = 0;i < connected_nodes.length;i++){
                edges.add([{from:change_id,to:connected_nodes[i]}]);
            }
        }
        if($('#selected_topo_type').val() == 'server'){
            node_data.label = uid2tuple(parseInt($('#modal_node_id_server').val()),topo_property.level,topo_property.tk);
            node_data.tuple = uid2tuple(parseInt($('#modal_node_id_server').val()),topo_property.level,topo_property.tk);
            node_data.type = 'server';
        }else if($('#selected_topo_type').val() == 'switch'){
            node_data.label = 'switch';
            node_data.type = 'switch';
        }

        $('#modal_edit_node').modal('hide');
        nodes.update(node_data);
    }
    $(document).ready(function(){
        $('.ui.checkbox').checkbox();
        $('.ui.dropdown').dropdown();
        $('.ui.modal').modal({autofocus:false});
        $('#pr').hide();
        $('#btn_start').click(function(){
            if($('#btn_start').attr('class') == 'ui button positive fluid'){
                $('#btn_start').attr('class','ui button negative fluid');
                $('#btn_start').text('停止仿真');
                $('#pr').show();
            }else{
                $('#btn_start').attr('class','ui button positive fluid');
                $('#btn_start').text('开始仿真');
                $('#pr').hide();
            }
        });
        $('#item_create_dcell').click(function(){
            $('#modal_create_topo').modal('show');
        });
        $('#btn_create_topo').click(function () {
            $('#topo_name').text($('#form_topo_name').val());
            $('#topo_type').text('DCELL');
            var post_data = {name:$('#topo_name').text(),type:$('#topo_type').text(),nodes:[],edges:[]};
            $.post('/setting/draw_topology/create',post_data,function (data,status) {
                var res_data = JSON.parse(data);
                if(res_data.status == 'success'){
                    topo_id_now = parseInt(res_data.topo_id);
                    create_dcell(Number($('#form_dcell_dgree').val()),Number($('#form_dcell_level').val()));
                    $('#topo_property').text('d:' + topo_property.degree + ',l:' + topo_property.level);
                    post_data = {id:topo_id_now,name:$('#topo_name').text(),type:$('#topo_type').text(),property:topo_property,nodes:net_datas2array(nodes),edges:net_datas2array(edges)};
                    $.post('/setting/draw_topology/save',post_data,function (data,status) {
                        $('#modal_create_topo').modal('hide');
                    });
                }else if(res_data.status == 'duplicate_name'){
                    alert('已存在拓扑名');
                }
            });
        });
        $('#btn_create_topo_cancel').click(function () {
            $('#modal_create_topo').modal('hide');
        });
        $('#add_node_mode').click(function () {
            $('#edit_menu').find('.item').removeClass('active');
            $('#add_node_mode').addClass('active');
            $('#mynetwork').css("cursor","crosshair");
            net.enableEditMode();
            net.addNodeMode();
        });
        $('#select_mode').click(function () {
            $('#edit_menu').find('.item').removeClass('active');
            $('#select_mode').addClass('active');
            $('#mynetwork').css("cursor","auto");
            net.disableEditMode();
        });
        $('#add_edge_mode').click(function () {
            $('#edit_menu').find('.item').removeClass('active');
            $('#add_edge_mode').addClass('active');
            $('#mynetwork').css("cursor","crosshair");
            net.enableEditMode();
            net.addEdgeMode();
        });
        $('#open_topo').click(function () {
            $('#modal_open_topo').modal({autofocus:false}).modal('show');
            $('#topo_type_select').dropdown();
        });
        $('#btn_update_node').click(function () {
            update_node();
        });
        $('#modal_edit_node').keyup(function (event) {
            if(event.keyCode == '13'){
                update_node();
            }
        });
        $('#btn_update_node_cancel').click(function () {
            $('#modal_edit_node').modal('hide');
        });
        $('#btn_delete_node').click(function () {
            $('#modal_edit_node').modal('hide');
            net.deleteSelected();
        });
        $('#btn_open_topo_cancel').click(function(){
            $('#modal_open_topo').modal('hide');
        });
        $('#save_topo').click(function () {
            var nodes_array = net_datas2array(nodes);
            var edges_array = net_datas2array(edges);
            if(topo_id_now == null){
                alert('请打开一个拓扑');
                return;
            }
            var post_data = {id:topo_id_now,name:$('#topo_name').text(),type:$('#topo_type').text(),property:topo_property,nodes:nodes_array,edges:edges_array};
            $.post('/setting/draw_topology/save',post_data,function (data,status) {
                alert('保存成功');
            });
        });
        $('#menu_change_toponame').click(function(){
            $('#txt_change_toponame').val($('#topo_name').text());
            $('#modal_change_toponame').modal('show');
        });
        $('#btn_change_toponame').click(function () {
            $('#topo_name').text($('#txt_change_toponame').val());
            $('#modal_change_toponame').modal('hide');
        })

        var post_data = {};
        post_data.type = 'topo_data';
        post_data.topo_id = <% if(recent_topo_id !=null){ %><%= recent_topo_id %><% }else{ %>0<% } %>;
        $.post('/setting/draw_topology/get_topo',post_data,function (data,status) {
            var parse_data = JSON.parse(data);
            topo_id_now = parse_data.topo_id;
            topo_property = JSON.parse(parse_data.topo_property);
            $('#topo_name').text(parse_data.topo_name);
            $('#topo_type').text(parse_data.topo_type);
            $('#topo_property').text('d:' + topo_property.degree + ',l:' + topo_property.level);
            create_net(JSON.parse(parse_data.topo_nodes),JSON.parse(parse_data.topo_edges));
            $('#modal_open_topo').modal('hide');
        });
    });
</script>
